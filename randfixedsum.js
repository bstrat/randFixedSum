// Generated by CoffeeScript 1.6.3
(function() {
  var matrixOf, randFixedSum, randPerm, randomMatrix, typeOfSimplex, vectorOf, zerosMatrix;

  matrixOf = function(f, n, m) {
    var i, j, _i, _results;
    _results = [];
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; 0 <= m ? _j < m : _j > m; j = 0 <= m ? ++_j : --_j) {
          _results1.push(f());
        }
        return _results1;
      })());
    }
    return _results;
  };

  zerosMatrix = function(n, m) {
    return matrixOf((function() {
      return 0;
    }), n, m);
  };

  randomMatrix = function(n, m) {
    return matrixOf((function() {
      return Math.random();
    }), n, m);
  };

  vectorOf = function(f, n) {
    var i, _i, _results;
    _results = [];
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      _results.push(f());
    }
    return _results;
  };

  randPerm = function(n) {
    var i;
    return ((function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        _results.push([i, Math.random()]);
      }
      return _results;
    })()).sort(function(a, b) {
      return a[1] < b[1];
    }).map(function(p) {
      return p[0];
    });
  };

  typeOfSimplex = function(n, k, s) {
    var i, j, s1, s2, t, w, _1, _2, _3, _4, _i, _j, _ref;
    s1 = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = k, _ref = k - n + 1; k <= _ref ? _i <= _ref : _i >= _ref; i = k <= _ref ? ++_i : --_i) {
        _results.push(s - i);
      }
      return _results;
    })();
    s2 = (function() {
      var _i, _ref, _ref1, _results;
      _results = [];
      for (i = _i = _ref = k + n, _ref1 = k + 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
        _results.push(i - s);
      }
      return _results;
    })();
    t = zerosMatrix(n - 1, n);
    w = zerosMatrix(n, n + 1);
    w[0][1] = Number.MAX_VALUE;
    _ref = [[], [], [], []], _1 = _ref[0], _2 = _ref[1], _3 = _ref[2], _4 = _ref[3];
    for (i = _i = 1; 1 <= n ? _i < n : _i > n; i = 1 <= n ? ++_i : --_i) {
      for (j = _j = 0; 0 <= i ? _j <= i : _j >= i; j = 0 <= i ? ++_j : --_j) {
        _1[j] = w[i - 1][j + 1] * s1[j] / (i + 1);
        _2[j] = w[i - 1][j] * s2[n - i - 1 + j] / (i + 1);
        w[i][j + 1] = _1[j] + _2[j];
        _3[j] = w[i][j + 1] + Number.MIN_VALUE;
        _4[j] = s2[n - i - 1 + j] > s1[j];
        t[i - 1][j] = _4[j] * _2[j] / _3[j] + !_4[j] * (1 - _1[j] / _3[j]);
      }
    }
    t[0][n] = w[n - 1][k + 1] / Number.MAX_VALUE;
    return t;
  };

  randFixedSum = function(n, m, s, a, b, v) {
    var es, i, j, js, k, pr, ps, rs, rt, sm, sx, t, xs, _i, _j, _k, _l, _ref, _ref1, _results, _s;
    if (v == null) {
      v = void 0;
    }
    s = (s - n * a) / (b - a);
    k = Math.max(Math.min(Math.floor(s), n - 1), 0);
    s = Math.max(Math.min(s, k + 1), k);
    t = typeOfSimplex(n, k, s);
    if (v != null) {
      v = Math.pow(n, 1.5) * t[0][n] * Math.pow(b - a, n - 1);
    }
    xs = zerosMatrix(n, m);
    rt = randomMatrix(n - 1, m);
    rs = randomMatrix(n - 1, m);
    _ref = [s, k, 0, 1].map(function(x) {
      return vectorOf((function() {
        return x;
      }), m);
    }), _s = _ref[0], js = _ref[1], sm = _ref[2], pr = _ref[3];
    _ref1 = [[], []], es = _ref1[0], sx = _ref1[1];
    for (i = _i = n; n <= 2 ? _i <= 2 : _i >= 2; i = n <= 2 ? ++_i : --_i) {
      for (j = _j = 0; 0 <= m ? _j < m : _j > m; j = 0 <= m ? ++_j : --_j) {
        es[j] = rt[n - i][j] <= t[i - 2][js[j]];
        sx[j] = Math.pow(rs[n - i][j], 1 / (i - 1));
        sm[j] = sm[j] + (1 - sx[j]) * pr[j] * _s[j] / i;
        pr[j] = sx[j] * pr[j];
        xs[n - i][j] = sm[j] + pr[j] * es[j];
        _s[j] = _s[j] - es[j];
        js[j] = js[j] - es[j];
      }
    }
    for (j = _k = 0; 0 <= m ? _k < m : _k > m; j = 0 <= m ? ++_k : --_k) {
      xs[n - 1][j] = sm[j] + pr[j] * _s[j];
    }
    ps = vectorOf((function() {
      return randPerm(n);
    }), m);
    if (v != null) {
      return v;
    } else {
      return (function() {
        _results = [];
        for (var _l = 0; 0 <= m ? _l < m : _l > m; 0 <= m ? _l++ : _l--){ _results.push(_l); }
        return _results;
      }).apply(this).map(function(j) {
        var _l, _results;
        return (function() {
          _results = [];
          for (var _l = 0; 0 <= n ? _l < n : _l > n; 0 <= n ? _l++ : _l--){ _results.push(_l); }
          return _results;
        }).apply(this).map(function(i) {
          return a + (b - a) * xs[ps[j][i]][j];
        });
      });
    }
  };

  if (typeof global !== "undefined" && global !== null) {
    global.randFixedSum = randFixedSum;
  }

}).call(this);
